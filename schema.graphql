type Query {
  screen(id: ID!): Screen
  screens: [Screen]
  character(id: ID!): Character
  characters: [Character]
  player(name: String!): [Character]
}

type Mutation {
  createCharacter(input: CreateCharacterInput): Character
  updateCharacter(input: UpdateCharacterInput): Character
}

type Screen {
  id: ID!
  name: String
  backgroundName: String
  characters: [Character]
  mapObjects: [MapObject]
}

type Character {
  id: ID!
  screenID: ID!
  name: String!
  role: String!
  imageName: String!
  level: String!
  xRatio: Float!
  yRatio: Float!
  events: [Event]
  action: String
  mantra: String
}

type Event {
  characterID: ID!
  levelLimit: Int!
  keyword: String!
  info: String!
  validate: String
  validateSeparator: String
  lv: Int!
}

type MapObject {
  id: ID!
  screenID: ID!
  name: String
  imageName: String!
  targetScreenID: ID!
  action: String!
  xRatio: Float!
  yRatio: Float!
}

input CreateCharacterInput {
  screenID: ID
  name: String
  role: String
  imageName: String
  level: String
  xRatio: Float
  yRatio: Float
  action: String
  mantra: String
}

input UpdateCharacterInput {
  id: ID
  screenID: ID
  name: String
  role: String
  imageName: String
  level: String
  xRatio: Float
  yRatio: Float
  action: String
  mantra: String
}
